scalar DateTime

type Query {
  user: User
  projects: [Project!]!
  project(id: ID!): Project
  # filterProjects(searchString: String): [Project!]!
}

type Mutation {
  createProject(
    title: String!
    isPublic: Boolean!
    title: String!
    content: String
    author: User!
    location: String!
    city: String!
    country: String!
    genres: [String!]
    artists: [String!]
    links: [String!]
    roles: [Role!]
    status: String!
  ): Project!
  deleteProject(id: ID!): Project
  updateProject(
    id: ID!
    isPublic: Boolean!
    title: String!
    content: String
    author: User!
    location: String!
    city: String!
    country: String!
    genres: [String!]
    artists: [String!]
    links: [String!]
    roles: [Role!]
    status: String!
  ): Project
  updateUser(id: ID!, name: String): User
  signup(email: String!, password: String!, name: String): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
}

type AuthPayload {
  token: String!
  user: User!
}

type Role {
  id: ID!
  title: String!
  content: String
  status: String!
  user: User
}

type Project {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublic: Boolean!
  title: String!
  content: String
  author: User!
  location: String!
  city: String!
  country: String!
  genres: [String!]
  artists: [String!]
  links: [String!]
  roles: [Role!]
  status: String!
}

type User {
  id: ID!
  email: String!
  name: String
  projects: [Project!]!
}
